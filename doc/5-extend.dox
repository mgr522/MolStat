/* This file is a part of MolStat, which is distributed under the Creative
   Commons Attribution-NonCommercial 4.0 International Public License.

   (c) 2014 Northwestern University. */

/**
\page extend_molstat Extending MolStat

This chapter describes how to extend the functionality of MolStat. \ref sec_add_general describes how to add, e.g., random number distributions and histogram binning styles. \ref sec_add_simulate describes how to add simulator models and observables. \ref sec_add_fit_model describes how to add fitter models. The implementation and incorporation of any of these concepts into MolStat is designed to be straightforward.

\section sec_style_guide MolStat Style Guidelines
Before discussing how to extend MolStat, we introduce the style guidelines for MolStat code.

-# Every MolStat file should begin with a comment identifying the file as part of MolStat. This comment should include reference to the \ref sec_license. The copyright can be changed to reflect the authors' affiliation(s).

-# All files, classes, typedefs, functions, etc., should have doxygen comment blocks around them that provide meaningful documentation. The only exceptions to this rule are class member functions specified with the `default` or `delete` keywords, or override functions where the comments do not change from the parent class. Any of these quantities that are meant for inclusion in MolStat should be placed in the `molstat` namespace.

-# Try not to include unnecessary files. Also avoid `using` declarations in header files.

\section sec_add_general Adding General Mathematical Operations

\subsection subsec_add_rnd Adding Random Number Distributions
Random number distributions are computationally described by the molstat::RandomDistribution class. Adding a new random number distribution requires a class derived from molstat::RandomDistribution that implements the `sample` and `info` functions. `sample` takes in a `molstat::Engine` (a C++11 random number engine) and returns a random number from the distribution. `info` is used for output; it provides a string representation of the distribution.

Finally, the new random number distribution needs to be added to the molstat::RandomDistributionFactory function so that it is processed from input. In this function, the `distribution` tag for the input deck is defined and the code for processing `[distribution-parameters]` is implemented. The implemented distributions should provide sufficient examples. Note that the name of the distribution should be in lowercase.

\subsection subsec_add_binstyle Adding Binning Styles
Binning styles are described by the abstract molstat::BinStyle class. Adding a new binning style required deriving from this class and implementing the three abstract functions.
-# The mask function, \f$u = f(x)\f$, in `mask`.
-# The inverse mask function, \f$x = f^{-1}(u)\f$, in `invmask`.
-# The derivative of the mask function, \f$ \mathrm{d}f / \mathrm{d}x\f$, in
   `dmaskdx`.
.
When the new binning style is used, the set \f$\{f(x)\}\f$ is binned.

Finally, add the new binning style class to the molstat::BinStyleFactory function so that it can be referenced from the input arguments. The implemented examples should be sufficient to explain this procedure. Note that the name of the binning style should be in lowercase.

\section sec_add_simulate Adding Simulator Models and Observables

\subsection subsec_add_simulate_observable Adding Simulator Observables
Observables derive from the molstat::Observable template, in a "curiously recurring template pattern". In other words, the code to create a new observable, called `MyObservable`, looks like
\code{.cpp}
class MyObservable : public molstat::Observable<MyObservable>
{
public:
	MyObservable()
		: molstat::Observable<MyObservable>(&MyObservable::MyObservableFunction)
	{}

	virtual double MyObservableFunction(const std::valarray<double> &params) const = 0;
};
\endcode
There are two things to note about this boilerplate code:
-# The observable is calculated via the `MyObservableFunction` function. Any class that directly implements `MyObservable` (see the discussion on models below) needs to override `MyObservableFunction`. Such an observable function must have the signature
\code{.cpp}
double(const std::valarray<double> &) const
\endcode
The `valarray` argument is a set of model parameters, in the order specified by the `molstat::SimulateModel::get_names` member function.

-# The default constructor for molstat::Observable is explicitly deleted. A pointer to the member function for the observable must be provided in the constructor for `MyObservable`.
.

Finally, the observable needs to be added to MolStat's list of available observables (the `std::map` called `observables` in SimulatorInputParse::createSimulator). Boilerplate code is
\code{.cpp}
observables.emplace( molstat::to_lower("ObservableName"),
   molstat::GetObservableIndex<MyObservable>() );
\endcode
The name of the observable (for use in the MolStat input file) is the key `ObservableName`. This key should be in lowercase in the code (thus the call to molstat::to_lower); it is case insensitive in the input file.

\subsection subsec_add_simulate_model Adding Simulator Models
Models for the simulator are a bit more varied than observables, and thus there are several things to keep in mind when adding a simulator model. This guide will start with a simple example and add complexity, demonstrating how simulator models work.

At the highest level, models need to derive from the molstat::SimulateModel class. In most cases, the model will not directly derive from molstat::SimulateModel; instead, the model will derive from a subclass (or several subclasses) of molstat::SimulateModel. For example, molstat::Observable (the base template for an observable) itself derives from molstat::SimulateModel.
\attention Should a model (or another class) need to inherit directly from molstat::SimulateModel, the inheritance must be virtual. That is, the class declaration line should look like
\code
class MyModel : public virtual molstat::SimulateModel
\endcode

\subsubsection subsubsec_add_simulate_model_simple A Simple Model
Let's work through a simple example that uses the `MyObservable` observable introduced above. The declaration for a simple model looks like
\code{.cpp}
class MyModel : public MyObservable
{
protected:
	virtual std::vector<std::string> get_names() const override
	{
		return { "param0", "param1" };
	}

public:
	virtual double MyObservableFunction(const std::valarray<double> &params) const override
	{
		return params[0]; // simply return the first parameter in this example
	}
};
\endcode

The two functions do the following:
- `get_names` returns the names (in lowercase) of the parameters for this model. The order of the parameters will be preserved.
- `MyObservableFunction` takes a set of model parameters, ordered as in `get_names`, and calculates the value of the observable.

Finally, the new simulator model needs to be added to the list of available simulator models (the `std::map` called `models` in SimulatorInputParse::createSimulator). Boilerplate code is
\code{.cpp}
models.emplace( molstat::to_lower("ModelName"),
   molstat::GetSimulateModelFactory<MyModel>() );
\endcode
The name of the model (for use in the MolStat input file) is the key `ModelName`. This key should be in lowercase in the code (thus the call to molstat::to_lower); it is case insensitive in the input file.

\subsubsection subsubsec_add_simulate_model_composite Composite Models
More complicated models fall under the idea of a "composite" model. This type was motivated by applications in electron transport (\ref page_conductance_histograms), but is more general. The idea is that the model may rely on some number of submodels, and the observable is somehow the composition of the observables for all of the submodels. In electron transport, the model is a transport junction and the submodels are channels.

The first step is to define a type for the submodel.
\code{.cpp}
class MySubmodelType : public molstat::SimulateSubmodel<MySubmodelType>
{
	... // nothing specifically required inside the class
};
\endcode
All such submodels should then derive from this type. Note that the top-level model in a MolStat input command \b must be of type `molstat::SimulateModel` (the default). A `model` command (in the MolStat input) specifying a submodel type must be nested inside another `model` command.

Next we create a class for the composite model. Such a class must derive from molstat::CompositeSimulateModel; as before, the inheritance is usually not direct, and must be virtual.
\code{.cpp}
class MyCompositeModel
  : public molstat::UseSubmodelType<MySubmodelType>,
	  public molstat::CompositeObservable<MyObservable>
{
protected:
	// specify any parameters that originate in the composite model
	virtual std::vector<std::string> get_names() const override
	{
		...
	}

public:
	MyCompositeModel() : molstat::CompositeObservable<MyObservable>(
		[] (double a, double b) -> double { return a + b; }
	) {}
}
\endcode

Let's digest this code.
- Both the `molstat::UseSubmodelType` and `molstat::CompositeObservable` templates inherit from `molstat::CompositeSimulateModel`, fulfilling that requirement.
- The `UseSubmodelType` template specifies that any submodels should be of the `MySubmodelType` type.
- The `get_names` function works just as before. The composite model can specify parameters (perhaps the Fermi energy, in the case of an electron transport junction) that get passed to all submodels. Submodels can then specify their own additional parameters. Regarding ordering, the composite parameters will always appear \b before those of the submodels.
- The default constructor for molstat::CompositeObservable is explicitly deleted. Instead, our model has to provide a function of type `double(double, double)` for combining the observables from submodels. It is anticipated that this function is both associative and commutative. Note that, unlike the simpler `MyModel`, `MyCompositeModel` does not implement `MyObservableFunction` (because it is a "CompositeObservable").

Another comment on the nature of a `molstat::CompositeObservable` must be made. A composite observable simply means that the results from the submodels should be combined (in the specified way). A submodel is \b not required to implement the particular observable. MolStat will only check for this if the user requests the observable in the input file. In this way, a submodel does not need to implement every observable that can be combined, but only the one(s) requested by the user.

Finally, if the function combining results from the submodels is more complicated than a simple `double(double, double)` function, the composite model should simply treat the observable regularly (`molstat::Observable`) and override the observable's function.

\section sec_add_fit_model Adding Fitter Models

Much of the fitting procedure is handled internally by the GSL, and the molstat::FitModel class contains even more common operations. Ultimately, to implement a new model,
-# Derive a class from molstat::FitModel, implementing the molstat::FitModel::resid and molstat::FitModel::jacobian member functions. molstat::FitModel::resid calculates the component in \f$r\f$ for a particular data point \f$g_j\f$ and \f$p_j\f$. Similarly, molstat::FitModel::jacobian calculates the Jacobian at the specific data point, where the Jacobian is the matrix of derivatives,
   \f[ \frac{\partial}{\partial x_k} \left( f(g_j, \{x_k\}) - p_j \right). \f]
   \note Each row of the Jacobian for a given data point is calculated independently.
-# If the functional form and/or its Jacobian are expensive to calculate, you may wish to override the molstat::FitModel::resid_j function, which evaluates the residual and Jacobian together. The default provided by molstat::FitModel simply calls the subclass's `resid` and `jacobian` functions.
-# Implement the member function molstat::FitModel::append_default_guesses, which populates a vector of initial guesses to use for fitting the data. The fit will be performed for each initial guess, and the best fit will be output at the end. Similarly, implement the molstat::FitModel::create_initial_guess function, which facilitates runtime-specified initial guesses.
-# Implement the member function molstat::FitModel::print_fit, which prints a set of fitting parameters to the specified output stream.
-# If deemed necessary, override the molstat::FitModel::process_fit_parameters function, which \"cleans\" up the parameters. For instance, the \f$\gamma\f$ parameter in the molstat::SymmetricResonantFitModel may be mathematically positive or negative (the fit function only depends on \f$\gamma^2\f$), but physically it should be positive. This function ensures that, in this example, \f$\gamma>0\f$.
-# If deemed necessary, override the molstat::FitModel::is_good_fit function, which determines if the model parameters are suitable for the application. For example, the \f$c_\varepsilon\f$ and \f$c_\Gamma\f$ parameters in the molstat::SymmetricNonresonantFitModel must be both be positive to be physically relevant. Mathematically, it is equivalent if both are negative (and this is corrected in the molstat::FitModel::process_fit_models function); but the fit should be discarded if only one of the parameters is negative.
-# Add the model, using an input name as the key, to the fitter's `models` list in `main-fitter.cc`. The molstat::GetFitModelFactory template provides a wrapper for this operation. Using SymmetricResonantFitModel as an example, the code would be
   \verbatim
   models["symmetricresonant"] = GetFitModelFactory<SymmetricResonantFitModel, 1>();
   \endverbatim
   The key string should be in lowercase in the code; it is case insensitive in the input file.
*/
