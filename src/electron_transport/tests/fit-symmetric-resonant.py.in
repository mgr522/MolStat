# This file is a part of MolStat, which is distributed under the Creative
# Commons Attribution-NonCommercial 4.0 International Public License.
#
# (c) 2014 Northwestern University.

##
 # @file tests/fit-symmetric-resonant.py.in
 # @brief Test suite for fitting to the symmetric, resonant-tunneling model.
 # 
 # @test Test suite for fitting to the symmetric, resonant-tunneling model.
 #
 # The data in symmetric-nonresonant.dat was generated by the simulator with
 # the following input
 # @verbatim
 # observable DifferentialConductance 100 linear
 # model TransportJunction
 # 	distribution ef constant 0.
 # 	distribution v constant 0.
 # 	model SymmetricOneSiteChannel
 # 		distribution epsilon normal 0. 0.05
 # 		distribution gamma normal 0.5 0.05
 # 		distribution a constant 0.
 # 	endmodel
 # endmodel
 # trials 100000
 # output electron_transport/tests/symmetric-resonant.dat
 # @endverbatim
 # Note that bins with zero counts were deleted from the histogram (they cause
 # numerical problems when fitting to the SymmetricResonantFitModel).
 #
 # @author Matthew G.\ Reuter
 # @date November 2014

import subprocess
import math

## @cond

process = subprocess.Popen('@top_builddir@/src/molstat-fitter', stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
output = process.communicate( \
"""SymmetricResonant
@srcdir@/symmetric-resonant.dat
guess default
guess gamma 40. norm 1000.
noprint
""")

# make sure no errors were reported
assert(output[1] == '')

# check the output string
tokens = output[0].split()
assert(tokens[0] == 'Resid')
assert(tokens[1] == '=')
# check the residual -- this is empirical
assert(math.fabs(float(tokens[2]) - 3.57) / 3.57 < 5.e-2)

# check gamma -- not empirical
gammaline = tokens[3].split('=')
assert(gammaline[0] == 'gamma')
# need to remove the last character (a comma) from the number for the float call
assert(math.fabs(float(gammaline[1][:-1]) - 10.) / 10. < 5.e-2) # 5% relative error

# check norm -- this is empirical
normline = tokens[4].split('=')
assert(normline[0] == 'norm')
assert(math.fabs(float(normline[1]) - 713.) / 713. < 5.e-2) # 5% relative error

## @endcond
