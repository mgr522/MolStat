# This file is a part of MolStat, which is distributed under the Creative
# Commons Attribution-NonCommercial 4.0 International Public License.
#
# (c) 2014 Northwestern University.

##
 # @file tests/fit-options.py.in
 # @brief Test suite for input options (initial guess specification) in the
 #    conductance histogram fitter.
 # 
 # @test Test suite for input options (initial guess specification) in the
 #    conductance histogram fitter.
 #
 # The symmetric, resonant-tunneling model; the symmetric, non-resonant
 # tunneling model; and the asymmetric, resonant-tunneling model are all
 # tested with various initial guess combinations.
 #
 # See the documentation in fit-symmetric-nonresonant.py,
 # fit-symmetric-resonant.py, and fit-asymmetric-nonresonant.py for
 # information on how the input data was generated.
 #
 # @author Matthew G.\ Reuter
 # @date November 2014

import subprocess
import math

## @cond

# test using the symmetric, non-resonant model
process = subprocess.Popen('@top_builddir@/src/molstat-fitter', stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
output = process.communicate( \
"""SymmetricNonresonant
@srcdir@/symmetric-nonresonant.dat
print
guess cepsilon 60. cgamma 10. norm 1.e5
"""
)

# make sure no errors were reported
print output[1]
assert(output[1] == '')

# check the output string
tokens = output[0].split()

# first iteration
base = 0
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '0,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'cepsilon')
assert(math.fabs(float(numval[1][:-1]) - 60.) / 60. < 5.e-2) # 5% relative error
numval = tokens[base+3].split('=')
assert(numval[0] == 'cgamma')
assert(math.fabs(float(numval[1][:-1]) - 10.) / 10. < 5.e-2) # 5% relative error
numval = tokens[base+4].split('=')
assert(numval[0] == 'norm')
assert(math.fabs(float(numval[1]) - 1.e5) / 1.e5 < 5.e-2) # 5% relative error

# second iteration
base = base + 5
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '1,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'cepsilon')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'cgamma')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+4].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# third iteration
base = base + 5
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '2,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'cepsilon')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'cgamma')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+4].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# fourth iteration
base = base + 5
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '3,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'cepsilon')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'cgamma')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+4].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# fifth iteration
base = base + 5
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '4,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'cepsilon')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'cgamma')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+4].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# initial print of the residual
base = base + 5
assert(tokens[base+0] == 'Residual')
assert(tokens[base+1] == '=')
float(tokens[base+2]) # make sure it's a number

# the standard end-of-fitting output
base = base + 3
assert(tokens[base+0] == 'Resid')
assert(tokens[base+1] == '=')
# check the residual -- this is empirical
assert(math.fabs(float(tokens[base+2]) - 287.) / 287. < 5.e-2)

# check cepsilon -- not empirical
cepsline = tokens[base+3].split('=')
assert(cepsline[0] == 'cepsilon')
# need to remove the last character (a comma) from the number for the float call
assert(math.fabs(float(cepsline[1][:-1]) - 60.) / 60. < 5.e-2) #5% relative error

# check cgamma -- not empirical
cgammaline = tokens[base+4].split('=')
assert(cgammaline[0] == 'cgamma')
# need to remove the last character (a comma) from the number for the float call
assert(math.fabs(float(cgammaline[1][:-1]) - 10.) / 10. < 5.e-2) #5% relative error

# check norm -- this is empirical
normline = tokens[base+5].split('=')
assert(normline[0] == 'norm')
assert(math.fabs(float(normline[1]) - 567.) / 567. < 5.e-2)







# test for the symmetric, resonant tunneling model
process = subprocess.Popen('@top_builddir@/src/molstat-fitter', stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
output = process.communicate( \
"""SymmetricResonant
@srcdir@/symmetric-resonant.dat
print
guess gamma 9.7 norm 570.
"""
)

# make sure no errors were reported
assert(output[1] == '')

# check the output string
tokens = output[0].split()

# first iteration
base = 0
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '0,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'gamma')
assert(math.fabs(float(numval[1][:-1]) - 9.7) / 9.7 < 5.e-2) # 5% relative error
numval = tokens[base+3].split('=')
assert(numval[0] == 'norm')
assert(math.fabs(float(numval[1]) - 570.) / 570. < 5.e-2) # 5% relative error

# second iteration
base = base + 4
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '1,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'gamma')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# third iteration
base = base + 4
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '2,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'gamma')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# fourth iteration
base = base + 4
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '3,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'gamma')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# fifth iteration
base = base + 4
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '4,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'gamma')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# initial print of the residual
base = base + 4
assert(tokens[base+0] == 'Residual')
assert(tokens[base+1] == '=')
float(tokens[base+2]) # make sure it's a number

# the standard end-of-fitting output
base = base + 3
assert(tokens[base+0] == 'Resid')
assert(tokens[base+1] == '=')
# check the residual -- this is empirical
assert(math.fabs(float(tokens[base+2]) - 3.57) / 3.57 < 5.e-2)

# check gamma -- not empirical
gammaline = tokens[base+3].split('=')
assert(gammaline[0] == 'gamma')
# need to remove the last character (a comma) from the number for the float call
assert(math.fabs(float(gammaline[1][:-1]) - 10.) / 10. < 5.e-2) #5% relative error

# check norm -- this is empirical
normline = tokens[base+4].split('=')
assert(normline[0] == 'norm')
assert(math.fabs(float(normline[1]) - 714.) / 714. < 5.e-2)







# test for the asymmetric, resonant tunneling model
process = subprocess.Popen('@top_builddir@/src/molstat-fitter', stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
output = process.communicate( \
"""AsymmetricResonant
@srcdir@/asymmetric-resonant.dat
print
guess gammal 17. gammar 12. r 0.8 norm 44.
"""
)

# make sure no errors were reported
assert(output[1] == '')

# check the output string
tokens = output[0].split()

# first iteration
base = 0
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '0,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'gammaL')
assert(math.fabs(float(numval[1][:-1]) - 17.) / 17. < 5.e-2) # 5% relative error
numval = tokens[base+3].split('=')
assert(numval[0] == 'gammaR')
assert(math.fabs(float(numval[1][:-1]) - 12.) / 12. < 5.e-2) # 5% relative error
numval = tokens[base+4].split('=')
assert(numval[0] == 'r')
assert(math.fabs(float(numval[1][:-1]) - 0.8) / 0.8 < 5.e-2) # 5% relative error
numval = tokens[base+5].split('=')
assert(numval[0] == 'norm')
assert(math.fabs(float(numval[1]) - 44.) / 44. < 5.e-2) # 5% relative error

# second iteration
base = base + 6
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '1,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'gammaL')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'gammaR')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+4].split('=')
assert(numval[0] == 'r')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+5].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# third iteration
base = base + 6
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '2,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'gammaL')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'gammaR')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+4].split('=')
assert(numval[0] == 'r')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+5].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# fourth iteration
base = base + 6
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '3,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'gammaL')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'gammaR')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+4].split('=')
assert(numval[0] == 'r')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+5].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# fifth iteration
base = base + 6
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '4,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'gammaL')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'gammaR')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+4].split('=')
assert(numval[0] == 'r')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+5].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# sixth iteration
base = base + 6
assert(tokens[base+0] == 'Iter=')
assert(tokens[base+1] == '5,')
numval = tokens[base+2].split('=')
assert(numval[0] == 'gammaL')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+3].split('=')
assert(numval[0] == 'gammaR')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+4].split('=')
assert(numval[0] == 'r')
float(numval[1][:-1]) # make sure it's a number
numval = tokens[base+5].split('=')
assert(numval[0] == 'norm')
float(numval[1]) # make sure it's a number

# initial print of the residual
base = base + 6
assert(tokens[base+0] == 'Residual')
assert(tokens[base+1] == '=')
float(tokens[base+2]) # make sure it's a number

# the standard end-of-fitting output
base = base + 3
assert(tokens[base+0] == 'Resid')
assert(tokens[base+1] == '=')
# check the residual -- this is empirical
assert(math.fabs(float(tokens[base+2]) - 330.) / 330. < 5.e-2)

# check gammaL -- not empirical
gammalline = tokens[base+3].split('=')
assert(gammalline[0] == 'gammaL')
# need to remove the last character (a comma) from the number for the float call
assert(math.fabs(float(gammalline[1][:-1]) - 12.) / 12. < 5.e-2) #5% relative error

# check gammaR -- not empirical
gammarline = tokens[base+4].split('=')
assert(gammarline[0] == 'gammaR')
# need to remove the last character (a comma) from the number for the float call
assert(math.fabs(float(gammarline[1][:-1]) - 17.) / 17. < 5.e-2) #5% relative error

# check r -- not empirical
rline = tokens[base+5].split('=')
assert(rline[0] == 'r')
# need to remove the last character (a comma) from the number for the float call
assert(math.fabs(float(rline[1][:-1]) - 0.8) / 0.8 < 5.e-2) #5% relative error

# check norm -- this is empirical
normline = tokens[base+6].split('=')
assert(normline[0] == 'norm')
assert(math.fabs(float(normline[1]) - 54.) / 54. < 5.e-2)

## @endcond
