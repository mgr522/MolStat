# This file is a part of MolStat, which is distributed under the Creative
# Commons Attribution-NonCommercial 4.0 International Public License.
#
# (c) 2014 Northwestern University.

##
 # @file tests/fit-asymmetric-resonant.py.in
 # @brief Test suite for fitting to the asymmetric, resonant-tunneling model.
 # 
 # @test Test suite for fitting to the asymmetric, resonant-tunneling model.
 #
 # The data in symmetric-nonresonant.dat was generated by the simulator with
 # the following input
 # @verbatim
 # AsymmetricOneSite
 # DifferentialConductance
 # 100000
 # 100 linear
 # EF constant 0.
 # V constant 0.
 # epsilon normal 0.01 0.05
 # gammal normal 0.5 0.04
 # gammar normal 0.7 0.04
 # a constant 0.
 # @endverbatim
 #
 # @author Matthew G.\ Reuter
 # @date November 2014

import subprocess
import math

## @cond

process = subprocess.Popen('@top_builddir@/src/molstat-fitter', stdout=subprocess.PIPE, stdin=subprocess.PIPE, stderr=subprocess.PIPE)
output = process.communicate( \
"""AsymmetricResonant
@srcdir@/asymmetric-resonant.dat
noprint
""")

# make sure no errors were reported
assert(output[1] == '')

# check the output string
tokens = output[0].split()
assert(tokens[0] == 'Resid')
assert(tokens[1] == '=')
# check the residual -- this is empirical
assert(math.fabs(float(tokens[2]) - 330.) / 330. < 5.e-2)

# check gammaL -- not empirical
gammalline = tokens[3].split('=')
assert(gammalline[0] == 'gammaL')
# need to remove the last character (a comma) from the number for the float call
assert(math.fabs(float(gammalline[1][:-1]) - 12.5) / 12.5 < 5.e-2) #5% relative error

# check gammaR -- not empirical
gammarline = tokens[4].split('=')
assert(gammarline[0] == 'gammaR')
# need to remove the last character (a comma) from the number for the float call
assert(math.fabs(float(gammarline[1][:-1]) - 17.5) / 17.5 < 5.e-2) #5% relative error

# check r -- not empirical
rline = tokens[5].split('=')
assert(rline[0] == 'r')
# need to remove the last character (a comma) from the number for the float call
assert(math.fabs(float(rline[1][:-1]) - 1.) / 1. < 5.e-1) #50% relative error
# remember, the fit is insensitive to r

# check norm -- this is empirical
normline = tokens[6].split('=')
assert(normline[0] == 'norm')
assert(math.fabs(float(normline[1]) - 54.) / 54. < 5.e-2)

## @endcond
